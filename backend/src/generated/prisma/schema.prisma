// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  name       String
  password   String
  picture    String      @default("blue")
  bio        String      @default("")
  posts      Post[]      @relation("UserPosts")
  savedPosts SavedPost[]
  likedPosts LikedPost[]
  friends    Friends[]
}

model Post {
  id         Int         @id @default(autoincrement())
  title      String
  content    String
  published  Boolean     @default(false)
  author     User        @relation("UserPosts", fields: [authorId], references: [id])
  authorId   Int
  likeCount  Int         @default(0)
  savedCount Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  savedBy    SavedPost[]
  likedBy    LikedPost[]
}

model Friends {
  friend   User     @relation(fields: [friendId], references: [id])
  friendId Int
  savedAt  DateTime @default(now())

  @@id([savedAt, friendId])
}

model SavedPost {
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  post    Post     @relation(fields: [postId], references: [id])
  postId  Int
  savedAt DateTime @default(now())

  @@id([userId, postId])
}

model LikedPost {
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  post    Post     @relation(fields: [postId], references: [id])
  postId  Int
  likedAt DateTime @default(now())

  @@id([userId, postId])
}
